{"version":3,"sources":["components/Alert.js","components/About.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","React","createElement","style","height","alert","className","concat","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","About","myStyle","color","mode","backgroundColor","id","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","data-bs-parent","Navbar","Link","to","title","aria-label","aria-current","aboutText","placeholder","onClick","toggleMode","aria-checked","htmlFor","TextForm","_useState","useState","_useState2","_slicedToArray","selectedWords","setSelectedWords","_useState3","_useState4","selectedCharacters","setSelectedCharacters","document","addEventListener","selection","window","getSelection","toString","trim","length","words","split","filter","characters","_useState5","_useState6","text","setText","Fragment","heading","onChange","event","target","value","rows","disabled","newText","showAlert","join","replace","getElementById","select","navigator","clipboard","writeText","element","defaultProps","App","setMode","setAlert","message","setTimeout","Router","body","Routes","Route","exact","path","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.aff47296.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        <div style={{height:'50px'}}>\r\n\r\n            {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong> {capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { } from 'react'\r\n\r\nexport default function About(props) {\r\n\r\n    let myStyle = {\r\n        color: props.mode === 'dark' ? 'white' : 'black',\r\n        backgroundColor: props.mode==='dark'?'#2d2d56':'white'\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"container\" style={myStyle}>\r\n            <h3>About Us</h3>\r\n            <div className=\"accordion\" id=\"accordionExample\">\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\">\r\n                        <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"false\" aria-controls=\"collapseOne\">\r\n                            <strong>   Analize your text</strong>\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse \" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            TextTransform gives you a way to Analize your text Quickly and efficiently.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\">\r\n                        <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                            <strong>  Free to use</strong>\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            TextTransform is a free character counter tool thatprovides instant character count & word count statistics for a given text. TextTransform reports the number of words and characters. This is suitable for writing text with word/ Character limit.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\">\r\n                        <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                            <strong> Browser compatible</strong>\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            This word counter software works in any web browser such as Chrome, FireFox, Internet Explorer, Safari, Opera. It suits to count characters in facebook, blog, books, excel documents, essas, etc.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport propTypes from \"prop-types\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode} `}>\r\n      <div className=\"container-fluid\">\r\n        <Link className=\"navbar-brand\" to=\"/\" >\r\n          {props.title}\r\n        </Link>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\" >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                Home\r\n              </Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">\r\n                {props.aboutText}\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n          <form className=\"d-flex\" role=\"search\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-outline-success\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form>\r\n          <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'} mx-3`}>\r\n            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\"\r\n              aria-checked=\"false\" id=\"flexSwitchCheckDefault\" />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: propTypes.string.isRequired,\r\n  aboutText: propTypes.string.isRequired,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Set Title Here\",\r\n  aboutText: \"About\",\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpClick = () => {\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to uppercase\", \"success\");\r\n  };\r\n\r\n  const handleLoClick = () => {\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to Lowercase\", \"success\");\r\n  };\r\n\r\n  const handleClearClick = () => {\r\n    let newText = \"\";\r\n    setText(newText);\r\n    props.showAlert(\"TextArea Cleared\", \"success\");\r\n  };\r\n\r\n  const handleCopy = () => {\r\n    let text = document.getElementById(\"myBox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showAlert(\"Text Copied\", \"success\");\r\n  };\r\n\r\n  const handleExtraSpaces = () => {\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Extra Spaces Removed\", \"success\");\r\n  };\r\n  const handleExtraLines = () => {\r\n    let newText = text.replace(/\\n\\s*\\n/g, \"\\n\"); // Remove extra newlines\r\n    setText(newText); // Update the state\r\n    props.showAlert(\"Extra lines removed\", \"success\");\r\n  };\r\n\r\n  const handleOnChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  // New state variables to track selected words and characters\r\n  const [selectedWords, setSelectedWords] = useState(0);\r\n  const [selectedCharacters, setSelectedCharacters] = useState(0);\r\n\r\n  const handleTextSelection = () => {\r\n    const selection = window\r\n      .getSelection()\r\n      .toString()\r\n      .trim();\r\n\r\n    if (selection.length > 0) {\r\n      const words = selection.split(/\\s+/).filter((word) => word.length > 0)\r\n        .length;\r\n      const characters = selection.length;\r\n\r\n      setSelectedWords(words);\r\n      setSelectedCharacters(characters);\r\n    } else {\r\n      setSelectedWords(0);\r\n      setSelectedCharacters(0);\r\n    }\r\n  };\r\n  document.addEventListener(\"mouseup\", handleTextSelection);\r\n\r\n  const [text, setText] = useState(\" \");\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"#041319\" }}\r\n      >\r\n        <h2 className=\"mb-4\">{props.heading}</h2>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"myBox\"\r\n            onChange={handleOnChange}\r\n            style={{\r\n              backgroundColor: props.mode === \"dark\" ? \"#041319\" : \"white\",\r\n              color: props.mode === \"dark\" ? \"white\" : \"black\",\r\n            }}\r\n            rows=\"7\"\r\n            value={text}\r\n          ></textarea>\r\n        </div>\r\n        <button\r\n          disabled={text.length === 0}\r\n          className=\"btn btn-primary mx-1 my-1\"\r\n          onClick={handleUpClick}\r\n        >\r\n          Convert to UpperCase\r\n        </button>\r\n        <button\r\n          disabled={text.length === 0}\r\n          className=\"btn btn-primary mx-1 my-1\"\r\n          onClick={handleLoClick}\r\n        >\r\n          Convert to LowerCase\r\n        </button>\r\n        <button\r\n          disabled={text.length === 0}\r\n          className=\"btn btn-primary mx-1 my-1\"\r\n          onClick={handleExtraSpaces}\r\n        >\r\n          remove Extra Spaces\r\n        </button>\r\n        <button\r\n          disabled={text.length === 0}\r\n          className=\"btn btn-primary mx-1 my-1\"\r\n          onClick={handleExtraLines}\r\n        >\r\n          remove Extra Lines\r\n        </button>\r\n        <button\r\n          disabled={text.length === 0}\r\n          className=\"btn btn-primary mx-1 my-1\"\r\n          onClick={handleClearClick}\r\n        >\r\n          Clear Text\r\n        </button>\r\n        <button\r\n          disabled={text.length === 0}\r\n          className=\"btn btn-primary mx-1 my-1\"\r\n          onClick={handleCopy}\r\n        >\r\n          Coppy Text\r\n        </button>\r\n      </div>\r\n      <div\r\n        className=\"container my-3\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"black\" }}\r\n      >\r\n        <h2>Your Text Summery</h2>\r\n        <p>\r\n          {\r\n            text.split(/\\s+/).filter((element) => {\r\n              return element.length !== 0;\r\n            }).length\r\n          }{\" \"}\r\n          Words and {text.length} Characters\r\n        </p>\r\n        <p>\r\n          {\" \"}\r\n          {0.008 *\r\n            text.split(\" \").filter((element) => {\r\n              return element.length !== 0;\r\n            }).length}{\" \"}\r\n          Minutes to read\r\n        </p>\r\n        {/* Display selected text information */}\r\n        <h3>Selected Text Summary</h3>\r\n        <p>\r\n          {selectedWords} Selected Words and {selectedCharacters} Selected\r\n          Characters\r\n        </p>\r\n        <h3>Preview</h3>\r\n        <p>{text.length > 0 ? text : \"Nothing to Preview\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import \"./App.css\";\nimport Alert from \"./components/Alert\";\nimport About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport React, { useState } from \"react\";\nimport {\n  HashRouter as Router,\n  Routes,\n  Route\n} from 'react-router-dom';\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\"); // Whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n\n  var showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1000);\n  }\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = '#041319';\n      showAlert(\"Dark mode has been Enabled\", \"success\");\n      // document.title = 'TextTransform - Dark Mode';\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been Enabled\", \"success\");\n      // document.title = 'TextTransform - Light Mode';\n\n    }\n  };\n  return (\n    <>\n      <Router>\n        <Navbar title=\"TextTransform\" mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n          <Routes>\n            <Route exact path=\"/about\" element={<About mode={mode} />} />\n            <Route exact path=\"/\" element={<TextForm showAlert={showAlert} heading=\"Try TextTransform - Word Counter, Character Counter, Remove Extra Spaces\" mode={mode} />} />\n          </Routes>\n        </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}